  
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
       "location": {
          "type": "string",
          "defaultValue": "[resourceGroup().location]",
          "metadata": {
             "description": "Resource Group Location."
          }
       },
       "msiURL": {
          "type": "string",
          "metadata": {
             "description": "URL of the LANSA MSI which will be installed on each virtual machine."
          }
       },
       "virtualMachineSize": {
          "type": "string",
          "defaultValue": "Standard_B4ms",
          "metadata": {
             "description": "Size of the Virtual Machines in the Virtual Machine Scale Set."
          }
       },
       "dbVirtualMachineSize": {
          "type": "string",
          "defaultValue": "Standard_B2ms",
          "metadata": {
             "description": "Size of the Virtual Machine which manages the database."
          }
       },
       "stackName": {
          "type": "string",
          "metadata": {
             "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended. Some identifiers use precisely 9 characters from this name and so it can be useful to use exactly 9. The template pads it out or truncates it as necessary to make it 9 characters long where required."
          },
          "minLength" : 3,
          "maxLength": 61
       },
       "applicationGatewaySkuTier": {
          "type": "string",
          "allowedValues": [
             "Standard",
             "WAF"
          ],
          "defaultValue": "Standard",
          "metadata": {
             "description": "Application Gateway SKU Tier"
          }
       },
       "applicationGatewaySkuName": {
          "type": "string",
          "allowedValues": [
             "Standard_Small",
             "Standard_Medium",
             "Standard_Large",
             "WAF_Medium",
             "WAF_Large",
             "WAF_v2"
          ],
          "defaultValue": "Standard_Medium",
          "metadata": {
             "description": "Application Gateway SKU Name"
          }
       },
       "applicationGatewayCapacity": {
          "type": "int",
          "defaultValue": 2,
          "metadata": {
             "description": "Number of Application Gateway instances"
          }
       },
       "certificateBase64Encoded": {
          "type": "string",
          "metadata": {
             "description": "Base 64 encoded String representing the SSL certificate"
          }
       },
       "certificatePassword": {
          "type": "securestring",
          "metadata": {
             "description": "SSL certificate password"
          }
       },
       "minimumInstanceCount": {
          "type": "int",
          "defaultValue": 1,
          "metadata": {
             "description": "Minimum number of Virtual Machine instances (1 or more)."
          },
          "minValue": 1,
          "maxValue": 100
       },
       "maximumInstanceCount": {
          "type": "int",
          "defaultValue": 100,
          "metadata": {
             "description": "Maximum number of Virtual Machine instances (100 or less)."
          },
          "minValue": 1,
          "maxValue": 100
       },
       "databaseNewOrExisting": {
         "type": "string",
         "defaultValue": "new",
         "allowedValues": [
             "new",
             "existing"
          ],
         "metadata": {
           "description": "Determines whether a new SQL database should be provisioned or to use an existing database. Parameters which are relevant to choosing 'new' are prefixed 'New DB'. Parameters which are relevant to choosing 'existing' are prefixed 'Existing DB'."
         }
       },
       "databaseType": {
          "type": "string",
          "defaultValue": "SQLAZURE",
          "allowedValues": [
             "MSSQLS",
             "SQLAZURE",
             "MYSQL"
          ],
          "metadata": {
             "description": "Existing DB. Refer to LANSA documentation for an explanation of each Database Type and the supported versions of the database servers. DO NOT CHANGE THIS IF CREATING A NEW DATABASE. IT MUST BE SET TO SQLAZURE."
          }
       },
       "databaseServerName": {
          "type": "string",
          "defaultValue": "lansa",
          "metadata": {
             "description": "Existing DB. The name of the existing Database Server to connect to. If the name has /MSSQLSERVER appended, omit it."
          }
       },
       "databaseName": {
          "type": "string",
          "defaultValue": "lansa",
          "metadata": {
             "description": "The name of the new database to create or name of the existing database to connect to."
          }
       },
       "databaseLogin": {
          "type": "string",
          "metadata": {
             "description": "The admin user of the Azure SQL Database"
          }
       },
       "databaseLoginPassword": {
          "type": "securestring",
          "metadata": {
             "description": "The password of the admin user of the Azure SQL Database"
          }
 
       },
       "collation": {
          "type": "string",
          "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
          "metadata": {
             "description": "New DB. The new database collation for governing the proper use of characters."
          }
       },
       "edition": {
          "type": "string",
          "defaultValue": "Standard",
          "allowedValues": [
             "Basic",
             "Standard",
             "Premium"
          ],
          "metadata": {
             "description": "New DB. The type of database to create."
          }
       },
       "requestedServiceObjectiveName": {
          "type": "string",
          "defaultValue": "S2",
          "allowedValues": [
             "Basic",
             "S0",
             "S1",
             "S2",
             "S3",
             "S4",
             "S6",
             "S7",
             "S9",
             "S12",
             "P1",
             "P2",
             "P4",
             "P6",
             "P11",
             "P15"
          ],
          "metadata": {
             "description": "New DB. Describes the performance level for Edition"
          }
       },
       "maxSizeBytes": {
          "type": "string",
          "defaultValue": "1073741824",
          "metadata": {
             "description": "New DB. The maximum size, in bytes, for the new database"
          }
       },
       "adminUsername": {
          "type": "string",
          "metadata": {
             "description": "Admin username on all VMs."
          }
       },
       "adminPassword": {
          "type": "securestring",
          "metadata": {
             "description": "Admin password on all VMs."
          }
       },
       "webUsername": {
          "type": "string",
          "metadata": {
             "description": "Web Server username on all VMs. This must be different to the Admin Username."
          }
       },
       "webPassword": {
          "type": "securestring",
          "metadata": {
             "description": "Web Server password on all VMs."
          }
       },
       "webServerMaxConnect": {
          "type": "string",
          "defaultValue": "20",
          "metadata": {
             "description": "The maximum number of LANSA jobs to run on each Web Server. Setting triggerWebConfig will cause this value to be updated."
          }
       },
       "installMSI": {
          "type": "string",
          "defaultValue": "0",
          "metadata": {
             "description": "Install the MSI: Set this to 1 to execute an MSI install. Usually set to 0 when updating the stack"
          }
       },
       "updateMSI": {
          "type": "string",
          "defaultValue": "0",
          "metadata": {
             "description": "Update Stack: Set this to 1 to execute an MSI Upgrade. Obtains the specified MSI and installs it. Ensure the LansaMSI parameter is set correctly. If the LansaMSI parameter is not different a repair will be performed"
          }
       },
       "uninstallMSI": {
          "type": "string",
          "defaultValue": "0",
          "metadata": {
             "description": "Uninstall the MSI: Set this to 1 to uninstall the MSI. The MSI used to uninstall, is the last one that was installed. It is called c:\\lansa\\MyApp.msi"
          }
       },
       "triggerWebConfig": {
          "type": "string",
          "defaultValue": "0",
          "metadata": {
             "description": "Update Stack: Set this to 1 to update the web configuration"
          }
       },
       "imageOffer": {
          "type": "string",
          "defaultValue": "lansa-scalable-license",
          "allowedValues": [
             "lansa-scalable-license",
             "lansa-scalable-license-preview"
          ],
          "metadata": {
             "description": "The offer of the image. Allowed values: lansa-scalable-license, lansa-scalable-license-preview"
          }
       },
       "gitBranch": {
          "type": "string",
          "defaultValue": "support/L4W14200_scalable",
          "metadata": {
             "description": "Git Branch"
          }
       },
       "trace": {
          "type": "string",
          "defaultValue": "N",
          "allowedValues": [
             "Y",
             "N"
          ],
          "metadata": {
             "description": "Switch tracing on. Allowed values Y or N"
          }
       },
       "fixLicense": {
          "type": "string",
          "defaultValue": "0",
          "metadata": {
             "description": "Re-run licensing. It is unlikely that this parameter needs to be used"
          }
       }
    },
   "variables": {
     "isNewDatabase": "[equals(parameters('databaseNewOrExisting'), 'new')]",
     "namingInfix": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
     "longNamingInfix": "[toLower(parameters('stackName'))]",
     "dblongNamingInfix": "[toLower(concat('db',parameters('stackName')))]",
     "aglongNamingInfix": "[toLower(concat('ag',parameters('stackName')))]",
     "dbvmssName": "[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
     "addressPrefix": "10.0.0.0/16",
     "subnetPrefix": "10.0.0.0/24",
     "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
     "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
     "dbpublicIPAddressName": "[concat(variables('namingInfix'), 'dbpip')]",
     "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
     "loadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
     "lbFrontEndName": "LoadBalancerFrontEnd",
     "lbProbeName": "LoadBalancerProbe",
     "dbloadBalancerName": "[concat(variables('namingInfix'), 'dblb')]",
     "dblbFrontEndName": "dbLoadBalancerFrontEnd",
     "dblbProbeName": "dbLoadBalancerProbe",
     "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
     "dbpublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('dbpublicIPAddressName'))]",
     "natPoolName": "[concat(variables('namingInfix'), 'natpool')]",
     "bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
     "dbbePoolName": "[concat(variables('namingInfix'), 'dbbepool')]",
     "natStartPort": 50000,
     "natEndPort": 50119,
     "natBackendPort": 3389,
     "nicName": "[concat(variables('namingInfix'), 'nic')]",
     "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
     "frontEndIPConfigID": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadBalancerName'), variables('lbFrontEndName'))]",
     "imagePublisher": "lansa",
     "imageSku": "lansa-scalable-license-14-2",
     "osType": {
       "publisher": "[variables('imagePublisher')]",
       "offer": "[parameters('imageOffer')]",
       "sku": "[variables('imageSku')]",
       "version": "latest"
     },
     "imageReference": "[variables('osType')]",
     "sqlserverName": "[concat(variables('namingInfix'), 'sqlserver')]",
     "gitRepo": "https://raw.githubusercontent.com/robe070/cookbooks/",
     "gitRefreshName": "git-pull.ps1",
    "gitRefreshUri": "[concat(variables('gitRepo'), parameters('gitBranch'), '/scripts/', variables('gitRefreshName'))]",
    "q":  "'",
    "agPublicIPAddressName": "[concat(variables('namingInfix'), '-agpip')]",
    "agPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agPublicIPAddressName'))]",
    "agSubnetPrefix": "10.0.1.0/24",
    "agSubnetName": "[concat(variables('namingInfix'), '-agsubnet')]",
    "agSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('agsubnetName'))]",
    "agName": "[concat(variables('namingInfix'), '-ag')]",
    "agHttpListenerName": "appGatewayHttpListener",
    "agFrontendIPName": "appGatewayFrontendIP",
    "agFrontendPortName": "appGatewayFrontendPort",
    "agSslCertName": "appGatewaySslCert",
    "agBackendHttpSettingsName": "appGatewayBackendHttpSettings",
    "agBackendAddressPoolName": "[concat(variables('namingInfix'), '-agpool')]"
   },
    "resources": [
       {
          "condition": "[equals(parameters('databaseNewOrExisting'), 'new')]",
          "name": "[variables('sqlserverName')]",
          "type": "Microsoft.Sql/servers",
          "location": "[parameters('location')]",
          "dependsOn": [
             "[resourceId('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
             "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
          ],
          "tags": {
             "displayName": "SqlServer"
          },
          "apiVersion": "2018-06-01-preview",
          "properties": {
             "administratorLogin": "[parameters('databaseLogin')]",
             "administratorLoginPassword": "[parameters('databaseLoginPassword')]",
             "version": "12.0"
          },
          "resources": [
             {
                "condition": "[equals(parameters('databaseNewOrExisting'), 'new')]",
                "name": "[parameters('databaseName')]",
                "type": "databases",
                "location": "[parameters('location')]",
                "tags": {
                   "displayName": "Database"
                },
                "apiVersion": "2018-06-01-preview",
                "dependsOn": [
                   "[variables('sqlserverName')]"
                ],
                "properties": {
                   "edition": "[parameters('edition')]",
                   "collation": "[parameters('collation')]",
                   "maxSizeBytes": "[parameters('maxSizeBytes')]",
                   "requestedServiceObjectiveName": "[parameters('requestedServiceObjectiveName')]"
                }
             },
             {
                "condition": "[equals(parameters('databaseNewOrExisting'), 'new')]",
                "type": "firewallRules",
                "apiVersion": "2018-06-01-preview",
                "dependsOn": [
                   "[variables('sqlserverName')]"
                ],
                "location": "[parameters('location')]",
                "name": "AllowAllIps",
                "properties": {
                   "endIpAddress": "0.0.0.0",
                   "startIpAddress": "0.0.0.0"
                }
             }
          ]
       }
    ],
    "outputs": {
       "dbServerName": {
          "type": "string",
          "value": "[if(variables('isNewDatabase'), reference(variables('sqlserverName')).fullyQualifiedDomainName, parameters('databaseServerName'))]"
       },
       "dbName": {
          "type": "string",
          "value": "[parameters('databaseName')]"
       },
       "lbFqdn": {
          "type": "string",
          "value": "[concat('https://', reference(variables('agPublicIPAddressName')).dnsSettings.fqdn)]"
       },
       "dbrdpAddress": {
          "type": "string",
          "value": "[concat(reference(variables('dbpublicIPAddressName')).dnsSettings.fqdn, ':50000')]"
       },
       "rdpAddress": {
          "type": "string",
          "value": "[concat(reference(variables('publicIPAddressName')).dnsSettings.fqdn, ':50000')]"
       }
    }
 }